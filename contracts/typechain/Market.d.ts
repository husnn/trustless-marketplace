/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "accept(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "commit(uint256)": FunctionFragment;
    "dispute(uint256)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "received(uint256)": FunctionFragment;
    "reject(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sent(uint256)": FunctionFragment;
    "setBeneficiary(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "void(uint256)": FunctionFragment;
    "wrap(string,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accept",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "received",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sent", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "void", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "received", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "void", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;

  events: {
    "Accept(uint256)": EventFragment;
    "Cancel(uint256,address)": EventFragment;
    "Close(uint256,address,address,address,uint256)": EventFragment;
    "Commit(uint256,address,address,uint256)": EventFragment;
    "Dispute(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Receive(uint256)": EventFragment;
    "Reject(uint256)": EventFragment;
    "RequestVoidance(uint256,address)": EventFragment;
    "Send(uint256)": EventFragment;
    "Void(uint256,address,address)": EventFragment;
    "Wrap(uint256,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Close"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Commit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestVoidance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Send"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Void"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Wrap"): EventFragment;
}

export type AcceptEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type CancelEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; seller: string }
>;

export type CloseEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber] & {
    id: BigNumber;
    buyer: string;
    seller: string;
    currency: string;
    amount: BigNumber;
  }
>;

export type CommitEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    id: BigNumber;
    buyer: string;
    currency: string;
    amount: BigNumber;
  }
>;

export type DisputeEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; buyer: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReceiveEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type RejectEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type RequestVoidanceEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; voider: string }
>;

export type SendEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type VoidEvent = TypedEvent<
  [BigNumber, string, string] & { id: BigNumber; buyer: string; seller: string }
>;

export type WrapEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    id: BigNumber;
    seller: string;
    currency: string;
    amount: BigNumber;
    expiry: BigNumber;
  }
>;

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    accept(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispute(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          status: number;
          seller: string;
          uri: string;
          currency: string;
          amount: BigNumber;
          expiry: BigNumber;
          buyer: string;
          voider: string;
          unlocks: BigNumber;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    received(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reject(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sent(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBeneficiary(
      beneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    void(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrap(
      uri: string,
      currency: string,
      amount: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accept(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispute(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber
    ] & {
      status: number;
      seller: string;
      uri: string;
      currency: string;
      amount: BigNumber;
      expiry: BigNumber;
      buyer: string;
      voider: string;
      unlocks: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  received(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reject(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sent(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBeneficiary(
    beneficiary_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  void(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrap(
    uri: string,
    currency: string,
    amount: BigNumberish,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accept(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancel(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    close(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    commit(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    dispute(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    get(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        status: number;
        seller: string;
        uri: string;
        currency: string;
        amount: BigNumber;
        expiry: BigNumber;
        buyer: string;
        voider: string;
        unlocks: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    received(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    reject(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sent(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBeneficiary(
      beneficiary_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    void(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    wrap(
      uri: string,
      currency: string,
      amount: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Accept(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    Accept(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "Cancel(uint256,address)"(
      id?: null,
      seller?: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; seller: string }>;

    Cancel(
      id?: null,
      seller?: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; seller: string }>;

    "Close(uint256,address,address,address,uint256)"(
      id?: null,
      buyer?: string | null,
      seller?: string | null,
      currency?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber],
      {
        id: BigNumber;
        buyer: string;
        seller: string;
        currency: string;
        amount: BigNumber;
      }
    >;

    Close(
      id?: null,
      buyer?: string | null,
      seller?: string | null,
      currency?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber],
      {
        id: BigNumber;
        buyer: string;
        seller: string;
        currency: string;
        amount: BigNumber;
      }
    >;

    "Commit(uint256,address,address,uint256)"(
      id?: null,
      buyer?: string | null,
      currency?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { id: BigNumber; buyer: string; currency: string; amount: BigNumber }
    >;

    Commit(
      id?: null,
      buyer?: string | null,
      currency?: string | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { id: BigNumber; buyer: string; currency: string; amount: BigNumber }
    >;

    "Dispute(uint256,address)"(
      id?: null,
      buyer?: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; buyer: string }>;

    Dispute(
      id?: null,
      buyer?: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; buyer: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Receive(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    Receive(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "Reject(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    Reject(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "RequestVoidance(uint256,address)"(
      id?: null,
      voider?: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; voider: string }>;

    RequestVoidance(
      id?: null,
      voider?: string | null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; voider: string }>;

    "Send(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    Send(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "Void(uint256,address,address)"(
      id?: null,
      buyer?: string | null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; buyer: string; seller: string }
    >;

    Void(
      id?: null,
      buyer?: string | null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; buyer: string; seller: string }
    >;

    "Wrap(uint256,address,address,uint256,uint256)"(
      id?: null,
      seller?: string | null,
      currency?: string | null,
      amount?: BigNumberish | null,
      expiry?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        seller: string;
        currency: string;
        amount: BigNumber;
        expiry: BigNumber;
      }
    >;

    Wrap(
      id?: null,
      seller?: string | null,
      currency?: string | null,
      amount?: BigNumberish | null,
      expiry?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        seller: string;
        currency: string;
        amount: BigNumber;
        expiry: BigNumber;
      }
    >;
  };

  estimateGas: {
    accept(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispute(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    received(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reject(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sent(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBeneficiary(
      beneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    void(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrap(
      uri: string,
      currency: string,
      amount: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accept(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispute(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    received(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reject(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sent(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBeneficiary(
      beneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    void(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrap(
      uri: string,
      currency: string,
      amount: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
